networks:
  gc-compose:

services:
  alertmanager:
    image: prom/alertmanager:latest
    container_name: gc-alertmanager
    ports:
      - '127.0.0.1:9093:9093'
    command: --config.file=/etc/alertmanager/config.yaml
    networks:
      - gc-compose
    volumes:
      - ./config/alertmanager.yaml:/etc/alertmanager/config.yaml:ro

  loki:
    image: grafana/loki:2.8.2
    ports:
{% for address in lc_loki_bind_addresses %}
      - '{{ address }}:3100:3100'
{% endfor %}
    command: -config.file=/etc/loki/config.yaml
    networks:
      - gc-compose
    volumes:
      - ./config/loki.yaml:/etc/loki/config.yaml:ro
{% if lc_loki_bind_mount_dir_sanitized %}
      - {{ lc_loki_bind_mount_dir_sanitized }}:/loki
{% endif %}
    depends_on:
        - alertmanager

  prometheus:
    image: prom/prometheus:latest
    container_name: gc-prometheus
    volumes:
      - ./config/prometheus.yaml:/etc/prometheus/prometheus.yaml
{% if lc_prometheus_bind_mount_dir_sanitized %}
      - - {{ lc_prometheus_bind_mount_dir_sanitized }}:/prometheus
{% else %}
      - prometheus-data:/prometheus
{% endif %}
    command:
      - '--config.file=/etc/prometheus/prometheus.yaml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
{% for address in lc_prometheus_bind_addresses %}
      - '{{ address }}:9090:9090'
{% endfor %}
    networks:
      - gc-compose

  grafana:
    image: grafana/grafana:latest
    container_name: gc-grafana
    environment:
      GF_PATHS_PROVISIONING: /etc/grafana/provisioning
      GF_AUTH_ANONYMOUS_ENABLED: false
      GF_SECURITY_ADMIN_USER: grafana_admin
      GF_SECURITY_ADMIN_PASSWORD: '${GRAFANA_PASSWORD}'
{% if lc_enable_acme_proxy %}
      VIRTUAL_HOST: '{{ lc_grafana_vhost }}'
      VIRTUAL_PORT: 3000
      LETSENCRYPT_HOST: '{{ lc_grafana_vhost }}'
      LETSENCRYPT_TEST: {{ lc_letsencrypt_test_mode | to_json }}
{% endif %}
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /etc/grafana/provisioning/datasources
        cat <<EOF > /etc/grafana/provisioning/datasources/ds.yaml
        apiVersion: 1
        datasources:
        - name: Loki
          type: loki
          access: proxy 
          orgId: 1
          url: http://loki:3100
          basicAuth: false
          isDefault: true
          version: 1
          editable: false
        EOF
        /run.sh
{% if lc_enable_acme_proxy %}
    expose:
      - 3000
{% else %}
    ports:
{% for address in lc_grafana_bind_addresses %}
        - '{{ address }}:3000:3000'
{% endfor %}
{% endif %}
    networks:
      - gc-compose
    volumes:
{% if lc_grafana_bind_mount_dir_sanitized %}
      - {{ lc_grafana_bind_mount_dir_sanitized }}:/var/lib/grafana/
{% else %}
      - grafana-data:/var/lib/grafana/
{% endif %}
    depends_on:
        - loki
{% if lc_enable_acme_proxy %}

  nginx-proxy:
    image: nginxproxy/nginx-proxy:latest
    container_name: gc-nginx
    labels:
        - 'com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy'
    volumes:
        - certs:/etc/nginx/certs:ro
        - nginx-conf:/etc/nginx/conf.d
        - nginx-html:/usr/share/nginx/html
        - ./config/nginx/vhost.d:/etc/nginx/vhost.d
        - /var/run/docker.sock:/tmp/docker.sock:ro
{% if lc_nginx_log_bind_mount_dir_sanitized %}
        - {{ lc_nginx_log_bind_mount_dir_sanitized }}:/var/log/nginx
{% endif %}
    environment:
        TRUST_DOWNSTREAM_PROXY: false
        DEFAULT_HOST: '{{ lc_grafana_vhost }}'
    networks: 
        - gc-compose
    ports:
        - '{{ lc_nginx_bind_address }}:80:80'
        - '{{ lc_nginx_bind_address }}:443:443'
    depends_on:
        - grafana

  acme:
      image: nginxproxy/acme-companion:latest
      container_name: gc-acme
      volumes_from:
          - nginx-proxy
      volumes:
          - acme:/etc/acme.sh
          - certs:/etc/nginx/certs:rw
          - /var/run/docker.sock:/var/run/docker.sock:ro
      environment:
          DEFAULT_EMAIL: '${ACME_EMAIL}'
      networks: 
          - gc-compose
      depends_on:
          - nginx-proxy
{% endif %}

volumes:
{% if lc_enable_acme_proxy %}
    acme:
    certs:
    nginx-conf:
    nginx-html:
{% endif %}
{% if not lc_grafana_bind_mount_dir_sanitized %}
    grafana-data:
{% endif %}
{% if not lc_prometheus_bind_mount_dir_sanitized %}
    prometheus-data:
{% endif %}